// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  USER
  ADMIN
  MERCHANT
}

model User {
  id Int @id @default(autoincrement())

  facebookId String? @unique @map("facebook_id") @db.VarChar(100)
  googleId   String? @unique @map("google_id") @db.VarChar(100)

  name       String?   @db.VarChar(50)
  mobile     String?   @unique @db.VarChar(10)
  email      String?   @unique @db.VarChar(40)
  password   String?   @db.VarChar(72)
  gender     Gender?
  birthdate  DateTime?
  imgProfile String?   @map("img_profile") @db.VarChar(200)
  createdAt  DateTime  @default(now()) @map("created_at")
  // role       Role      @default(USER)

  reviews   Review[]
  bookmarks Bookmark[]
  chats     Chat[]

  @@map("users")
}

model Merchant {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  username String @unique @db.VarChar(40)
  mobile   String @unique @db.VarChar(10)
  password String @db.VarChar(72)
  // role     Role   @default(MERCHANT)

  restaurants Restaurant[]

  @@map("merchants")
}

model Province {
  id             Int
  provinceCode   Int    @id @map("province_code")
  provinceNameTh String @map("province_name_th") @db.VarChar(200)
  provinceNameEn String @map("province_name_en") @db.VarChar(200)

  districts    District[]
  subDistricts SubDistrict[]
  restaurants  Restaurant[]

  @@map("provinces")
}

model District {
  id             Int
  districtCode   Int      @id @map("district_code")
  provinceCode   Int      @map("province_code")
  provinceCodeId Province @relation(fields: [provinceCode], references: [provinceCode])
  districtNameTh String   @map("distrit_name_TH") @db.VarChar(50)
  districtNameEn String   @map("distrit_name_EN") @db.VarChar(50)
  postalCode     Int

  restaurants  Restaurant[]
  subDistricts SubDistrict[]

  @@map("districts")
}

model SubDistrict {
  id              Int
  subdistrictCode Int      @id @map("subdistrict_code")
  districtCode    Int      @map("district_code")
  districtCodeId  District @relation(fields: [districtCode], references: [districtCode])
  provinceCode    Int      @map("province_code")
  provinceCodeId  Province @relation(fields: [provinceCode], references: [provinceCode])

  subdistrictNameEn String @map("subdistrict_name_En") @db.VarChar(50)
  subdistrictNameTh String @map("subdistrict_name_Th") @db.VarChar(50)
  postalCode        Int

  restaurants Restaurant[]

  @@map("sub_district")
}

enum Date {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

// model PriceLength {
//   id         Int          @id
//   length     String       @db.VarChar(50)
//   Restaurant Restaurant[]

//   @@map("price_length")
// }

model OpenHours {
  id           Int        @id @default(autoincrement())
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  date         Date
  openTime     DateTime   @map("open_time") @db.Time()
  closeTime    DateTime   @map("close_time") @db.Time()

  @@map("open_hours")
}

model Restaurant {
  id              Int         @id @default(autoincrement())
  merchantId      Int         @map("merchant_id")
  merchant        Merchant    @relation(fields: [merchantId], references: [id])
  restaurantName  String      @map("restaurant_name") @db.VarChar(100)
  subtitle        String      @db.VarChar(500)
  lat             String?
  lng             String?
  reviewPoint     Int         @default(0) @map("review_point")
  reviewCount     Int         @default(0) @map("review_count")
  verify          Boolean     @default(false)
  isOpen          Boolean     @default(false) @map("is_open")
  mobile          String      @unique @db.VarChar(10)
  email           String?     @unique @db.VarChar(50)
  profileImg      String?     @map("profile_img") @db.VarChar(256)
  // 
  address         String      @db.VarChar(200)
  districtCode    Int         @map("district_id")
  district        District    @relation(fields: [districtCode], references: [districtCode])
  subDistrictCode Int         @map("subdistrict_id")
  subDistrict     SubDistrict @relation(fields: [subDistrictCode], references: [subdistrictCode])
  provinceCode    Int         @map("province_id")
  provinces       Province    @relation(fields: [provinceCode], references: [provinceCode])
  priceLength     String      @map("price_length")
  categoryId      Int         @map("category_id")
  category        Category    @relation(fields: [categoryId], references: [id])

  restaurantImages           RestaurantImage[]
  menus                      Menu[]
  reviews                    Review[]
  bookmarks                  Bookmark[]
  openHours                  OpenHours[]
  facilitiesWithRestaurantId FacilityWithRestaurantId[]
  chats                      Chat[]

  @@map("restaurants")
}

//here
model RestaurantImage {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  img          String     @db.VarChar(256)

  @@map("restaurant_img")
}

model Menu {
  id           Int        @id @default(autoincrement())
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menuName     String     @map("menu_name") @db.VarChar(100)
  subtitle     String     @map("sub_title") @db.VarChar(200)
  price        Int?
  star         Int?
  img          String     @db.VarChar(256)

  @@map("menus")
}

model ReviewImg {
  id       Int    @id @default(autoincrement())
  img      String @db.VarChar(200)
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id])

  @@map("review_img")
}

model Review {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  user         User       @relation(fields: [userId], references: [id])
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  star         Int
  title        String     @db.VarChar(191)
  report       Boolean?
  // status       Boolean

  description String    @db.Text
  // report       Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")

  reviewImgs ReviewImg[]

  @@map("reviews")
}

model Category {
  id           Int          @id @default(autoincrement())
  categoryName String       @map("category_name") @db.VarChar(50)
  restaurants  Restaurant[]

  @@map("categorys")
}

model FacilityWithRestaurantId {
  id           Int         @id @default(autoincrement())
  facilityId   Int         @map("facility_id")
  facility     Facility    @relation(fields: [facilityId], references: [id])
  // Restaurant Restaurant[]
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

  @@map("facilities_with_restaurant_id")
}

model Facility {
  id                       Int                        @id @default(autoincrement())
  facilityName             String                     @map("facility_name") @db.VarChar(100)
  facilityWithRestaurantId FacilityWithRestaurantId[]

  @@map("facilities")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(50)
  password String @db.VarChar(50)
  // role     Role   @default(ADMIN)

  @@map("admins")
}

model Bookmark {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  user         User       @relation(fields: [userId], references: [id])
  restaurantId Int        @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("bookmarks")
}

enum Roles {
  USER
  RESTAURANT
}

model Chat {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  userid       User       @relation(fields: [userId], references: [id])
  restaurantId Int        @map("restaurant_id")
  restaurantid Restaurant @relation(fields: [restaurantId], references: [id])
  message      String     @db.VarChar(100)
  sender       Roles
}
